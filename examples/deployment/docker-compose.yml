version: '3.8'

services:
  # Fennec API application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fennec-api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/fennec_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - ENABLE_ADMIN=true
      - ENABLE_CACHE=true
      - ENABLE_MONITORING=true
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - fennec-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
  
  # Queue worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fennec-worker
    command: python worker.py
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/fennec_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - fennec-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: fennec-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=fennec_db
    ports:
      - "5432:5432"
    networks:
      - fennec-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: fennec-redis
    ports:
      - "6379:6379"
    networks:
      - fennec-network
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fennec-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - fennec-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fennec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - fennec-network
    restart: unless-stopped
    depends_on:
      - api

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: fennec-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fennec-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: fennec-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - fennec-network
    restart: unless-stopped

networks:
  fennec-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:
